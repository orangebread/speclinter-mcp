# SpecLinter MCP - AI-Powered Specification Analysis

SpecLinter is a Model Context Protocol (MCP) server that transforms specifications into structured tasks with built-in quality gates for AI-powered development.

## Quick Setup

To use SpecLinter as an MCP server, add this to your AI IDE's MCP configuration:

```json
{
  "mcpServers": {
    "speclinter": {
      "command": "node",
      "args": ["/path/to/speclinter-mcp/dist/cli.js", "serve"],
      "cwd": "/path/to/speclinter-mcp"
    }
  }
}
```

## Available MCP Tools

### Project Setup
- `speclinter_init_project` - Initialize SpecLinter in a project with smart defaults

### Codebase Analysis
- `speclinter_analyze_codebase` - Comprehensive codebase analysis that generates rich project documentation and context files

### Specification Parsing
- `speclinter_parse_spec` - Process specification and create SpecLinter tasks with AI analysis

### Similarity Detection
- `speclinter_find_similar` - Find similar features using AI-powered semantic analysis

### Task Management
- `speclinter_get_task_status` - Get current status of feature tasks
- `speclinter_update_task_status` - Update task status (completed, in-progress, blocked)

### Implementation Validation
- `speclinter_validate_implementation` - Scan codebase for feature implementation and provide comprehensive assessment

### AI-Powered Gherkin Generation
- `speclinter_generate_gherkin` - Generate comprehensive Gherkin scenarios for specific tasks with AI analysis

### Specification Quality Analysis
- `speclinter_analyze_spec_quality` - AI-powered specification quality analysis with semantic understanding

### Task Generation
- `speclinter_generate_tasks` - Generate comprehensive task breakdown from specifications with AI guidance

### Comprehensive Specification Analysis
- `speclinter_analyze_spec_comprehensive` - Complete specification analysis combining quality assessment and task generation

## Usage Examples

### Initialize Project
```
"Initialize SpecLinter in my project"
```

### Parse Specification
```
"Parse this spec: Create a user authentication system with email verification"
```

### Analyze Codebase
```
"Analyze my codebase and generate project documentation"
```

### Find Similar Features
```
"Check if this user profile feature is similar to existing features"
```

### Check Task Status
```
"Show me the status of my authentication-system tasks"
```

### Validate Implementation
```
"Validate the implementation of my authentication feature"
```

### Generate Gherkin Scenarios
```
"Generate Gherkin scenarios for my login task"
```

### Analyze Specification Quality
```
"Analyze the quality of this specification and provide improvement suggestions"
```

## Key Features

- **AI-Leveraged Analysis**: Semantic understanding vs regex patterns
- **Quality Grading**: A+ to F grading with improvement suggestions
- **Task Generation**: Break specs into implementable tasks with dependencies
- **AI-Powered Gherkin Scenarios**: Generate comprehensive, actionable test scenarios with multiple types (happy path, error handling, edge cases, validation)
- **Similarity Detection**: AI-powered semantic analysis to prevent duplicate work
- **Implementation Validation**: AI assessment of code against specifications
- **Quality Configuration**: Configurable scenario complexity, security/performance testing, and validation requirements

## Project Structure

SpecLinter creates this structure when initialized:

```
your-project/
├── .speclinter/
│   ├── config.json            # Configuration
│   ├── speclinter.db          # SQLite database
│   └── context/               # Project context
│       ├── project.md         # Tech stack, constraints
│       ├── patterns.md        # Code patterns
│       └── architecture.md    # Architecture decisions
└── speclinter-tasks/
    └── [feature-name]/
        ├── _active.md         # Live status dashboard
        ├── task_01_*.md       # Individual task files
        ├── meta.json          # Feature metadata
        └── gherkin/           # Test scenarios
            └── *.feature
```

## Quality Grading System

- **A+ (95-100)**: Exceptional specification with comprehensive details
- **A (90-94)**: Excellent specification with clear requirements
- **B (80-89)**: Good specification with minor improvements needed
- **C (70-79)**: Adequate specification with several areas for improvement
- **D (60-69)**: Poor specification requiring significant enhancement
- **F (0-59)**: Failing specification with major issues

## Installation

```bash
# Install dependencies and build
pnpm install && pnpm build

# Alternative: use npm or yarn
npm install && npm run build
```

## Requirements

- Node.js 18+
- TypeScript support
- SQLite for task management

## Repository

https://github.com/orangebread/speclinter-mcp

## License

MIT
